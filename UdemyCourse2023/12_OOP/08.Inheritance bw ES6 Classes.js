class PersonCl {
  constructor(fullName, birthYear) {
    this.fullName = fullName;
    this.birthYear = birthYear;
  }

  //Minden met√≥dus a l√©trehozott objektum prorotype-ja lesz
  calcAge() {
    console.log(new Date().getFullYear() - this.birthYear);
  }

  greet() {
    console.log(`Hey ${this.fullName}`);
  }

  get age() {
    return new Date().getFullYear() - this.birthYear;
  }

  get fullName() {
    return this._fullName;
  }

  // Set a property that already exists
  //settert adatellen≈ërz√©sre is haszn√°lhatjuk
  //pl. a megadott n√©v fullname-e
  set fullName(name) {
    //_fullname-ben a _ csak a n√©vegyez≈ës√©g miatt van
    if (name.includes(' ')) this._fullName = name;
    else alert(`${name} is not a full name!`);
  }

  // Static met√≥dus csak oszt√°ly r√©sz√©re, a p√©ld√°nyok nem haszn√°lhatj√°k
  static hey() {
    console.log('Hey there üëã');
  }
}

class StudentCl extends PersonCl {
  constructor(fullName, birthYear, course) {
    //a super f√ºggv√©ny felel≈ës, hogy a this erre a gyerek classra mutasson
    super(fullName, birthYear);
    this.course = course;
  }

  introduce() {
    console.log(`My name is ${this.fullName} and I study ${this.course}`);
  }

  //fel√ºl√≠rtuk a Person class calcAge met√≥dus√°t
  calcAge() {
    console.log(
      `I'm ${
        new Date().getFullYear() - this.birthYear
      } years old, but as a student I feel more like ${
        new Date().getFullYear() - this.birthYear + 10
      }`
    );
  }
}

const martha = new StudentCl('Martha Jones', 1998, 'Computer Science');
console.log(martha);
martha.introduce();
martha.calcAge();
