'use strict';

console.log('-----------Default Parameters------------');
//ES6
const bookings = [];

//itt a f√ºggv√©ny param√©tereinek default √©rt√©ket is adok
const createBooking = function (
  flightNum,
  numPassengers = 1,
  price = 200 * numPassengers
) {
  // ES5
  // numPassengers = numPassengers || 1;
  // price = price || 199;

  //k√©sz√≠t√ºnk egy obejktumot a bej√∂v≈ë √©rt√©kekb≈ël √©s azt elt√°roljuk egy t√∂mben
  const booking = {
    /*     flightNum: flightNum,
    numPassengers: numPassengers,
    price: price, */

    //egyszer≈±s√≠tett v√°ltozata
    //enhanced object literal syntax
    flightNum,
    numPassengers,
    price,
  };

  console.log(booking);
  bookings.push(booking);
};

createBooking('LH123');
createBooking('LH123', 2);
createBooking('LH123', 2, 800);

//undefined-et kell haszn√°lni ha valamelyik param√©tert nem akarjuk megv√°ltoztatni
//itt az els≈ënek √©s a harmadiknak szeretn√©nk csak √©rt√©ket adni, a m√°sodikat az alap√©rtelmezetten szeretn√©nk hagyni
createBooking('LH123', undefined, 1000);

console.log(bookings);

console.log(
  '----------How Passing Arguments Works: Values vs. Reference-------------'
);

const flight = 'LH234';

const jonas = {
  name: 'Jonas Schmedtmann',
  passport: 24739479284,
};

const checkIn = function (flightNum, passenger) {
  flightNum = 'LH999';
  passenger.name = 'Mr. ' + passenger.name;

  if (passenger.passport === 24739479284) {
    alert('Checked in');
  } else {
    alert('Wrong passport!');
  }
};

//a visszaadott √©rt√©k LH234 ez lesz √©s nem az amit a f√ºggv√©nyben megadtunk, mivel a flight egy primit√≠v √©rt√©k, √©s az √°tad√°skor az √©rt√©k egy m√°solata ker√ºl √°tad√°sra. A f√ºggv√©ny nem lesz hat√°ssal az eredeti, √°tadott √©rt√©kre. Itt √©rt√©k √°tad√°s t√∂rt√©nik
//a jonas eset√©ben a n√©v megv√°ltozik a f√ºggv√©ny futtat√°s√°t k√∂vet≈ëen,mivel egy objektumot adunk √°t a f√ºggv√©nynek, √©s az objektum referencia t√≠pus√∫. Az √°tad√°skor a hivatkoz√°st m√°solunk √©s az eredeti √©s az √°tadott is ugyanarra az objektumra mutat a mem√≥ria heap-ben. Itt hivatkoz√°s √°tad√°s t√∂rt√©nik, mem√≥riac√≠met adunk √°t.

//JS-ben CSAK √âRT√âK SZERINTI √ÅTAD√ÅS L√âTEZIK. Ugyan m≈±k√∂dik hivatkoz√°s √°tad√°ssal is, de ez is √©rt√©ket jelent a JS-ben, √©rt√©k amely a mem√≥riac√≠met tartalmazza
//checkIn(flight, jonas);

console.log(flight);
console.log(jonas);

const newPassport = function (person) {
  person.passport = Math.floor(Math.random() * 100000000000);
};

//ezzel a f√ºggv√©nnyel m√≥dos√≠tom az eredeti objektumot, megv√°ltoztatom az eredeti passport sz√°mot
newPassport(jonas);

//ez a f√ºggv√©ny wrong passport-ot ad vissza mert ez az eredeti passporttal ellen≈ëriz
//checkIn(flight, jonas);

console.log('---------First-Class and Higher-order function------');

//ELM√âLETI R√âSZ. PDF-ben

console.log('---------Functions Accepting Callback Functions---------');

//kiszedi a sz√≥k√∂z√∂ket a string-b≈ël
const oneWord = function (str) {
  return str.replace(/ /g, '').toLowerCase();
};

//a string els≈ë szav√°t nagybet≈±ss√© teszi
const upperFirstWord = function (str) {
  //rest oper√°tor
  const [first, ...others] = str.split(' ');
  //spread oper√°tor
  return [first.toUpperCase(), ...others].join(' ');
};

// transformer egy Higher-order function aminek param√©terk√©nt egy f√ºggv√©nyt adunk √°t, ami egy low level function
//a higher function feladata, hogy v√©grehajtsa a feladatot, de az nem √©rdekli, hogy hogyan. A hogyan√©rt a low level function felel.
const transformer = function (str, fn) {
  console.log(`Original string: ${str}`);
  console.log(`Transformed string: ${fn(str)}`);

  console.log(`Transformed by: ${fn.name}`);
};

//itt csak a f√ºggv√©ny√°tad√°s t√∂rt√©nik √©s nem f√ºggv√©ny h√≠v√°s. Ez√©rt csak a f√ºggv√©ny nev√©t kell megadni - upperFirstWord - √©s nem h√≠vni  azt- upperFirstWord()
transformer('JavaScript is the best!', upperFirstWord);
transformer('JavaScript is the best!', oneWord);

//addeventlisteners-nek √°tadottf√ºggv√©ny
const high5 = function () {
  console.log('üëã');
};
//a body ter√ºletre kattintva aktiv√°l√≥dik a high5 f√ºggv√©ny
//document.body.addEventListener('click', high5);

//egy t√∂mb√∂t a forEach-el bej√°rva a for-nak egy f√ºggv√©nyt adunk √°t
['Jonas', 'Martha', 'Adam'].forEach(high5);

console.log('------Functions Returning Functions-------');

//f√ºggv√©ny ami egy f√ºggv√©nnyel t√©r vissza
const greet = function (greeting) {
  return function (name) {
    console.log(`${greeting} ${name}`);
  };
};
//az ilyen t√≠pus√∫ f√ºggv√©nyeket √≠gy kell megh√≠vni. az els≈ë a f≈ëf√ºggv√©nynek at√≥dik √°t, a 2. argumentum a visszaadott f√ºggv√©nynek
greet('Hello')('Jonas');

//hosszabb v√°ltozata
//greet f√ºggv√©nynek √°tadjuk a Hey stringet, a f√ºggv√©ny eredm√©nye egy f√ºggv√©ny amit elt√°rolunk egy v√°ltoz√≥ba
const greeterHey = greet('Hey');

//ennek a v√°ltoz√≥nak, vagyis f√ºggv√©nynek adjuk √°t a Jonas stringet
greeterHey('Jonas');
greeterHey('Steven');

// greeat f√ºggv√©ny ny√≠lf√ºggv√©ny form√°tumban
const greetArr = greeting => name => console.log(`${greeting} ${name}`);

greetArr('Hi')('Jonas');

console.log('---------Call and apply Methods----------');

const lufthansa = {
  airline: 'Lufthansa',
  iataCode: 'LH',
  bookings: [],
  // book: function() {}
  book(flightNum, name) {
    console.log(
      `${name} booked a seat on ${this.airline} flight ${this.iataCode}${flightNum}`
    );
    this.bookings.push({ flight: `${this.iataCode}${flightNum}`, name });
  },
};

lufthansa.book(239, 'Jonas Schmedtmann');
lufthansa.book(635, 'John Smith');

const eurowings = {
  airline: 'Eurowings',
  iataCode: 'EW',
  bookings: [],
};

//a lufthansa objektum book met√≥dus√°t szedtem ki √©s mentettem el egy v√°ltoz√≥ba
const book = lufthansa.book;

// Does NOT work
//book(23, 'Sarah Williams');

// Call method
//ezzel a met√≥dussal tudom megh√≠vni egy objektum met√≥dus√°t egy m√°sik objektumra
//v√°ltoz√≥n√©v amibe kimentettem az objektum met√≥dust√°t, majd call √©en ennek argumentumak√©nt megadni a m√°sik objektum nev√©t, amire h√≠vni akarjuk, majd megadni az argumentumokat
book.call(eurowings, 23, 'Sarah Williams');
console.log(eurowings);

book.call(lufthansa, 239, 'Mary Cooper');
console.log(lufthansa);

const swiss = {
  airline: 'Swiss Air Lines',
  iataCode: 'LX',
  bookings: [],
};

book.call(swiss, 583, 'Mary Cooper');

console.log(swiss);

// Apply method
const flightData = [583, 'George Cooper'];
const flightData2 = [533, 'George Harrison'];

//apply met√≥dussal egy t√∂mben l√©v≈ë elemeket adhatunk √°t a book met√≥dusnak
book.apply(swiss, flightData);

//itt is a spread oper√°torral egy t√∂mb√∂t adunk √°t a book ment√≥dusnak
//ez esetben a call-n√©l haszn√°lni kell a spread oper√°tort
book.call(swiss, ...flightData2);

console.log('---------Bind Method---------');

//book.call(eurowings, 23, 'Sarah Williams');

//bind met√≥dust arra tudom haszn√°lni pl., hogy a const book = lufthansa.book; -al kiszedem az obejktumb√≥l a met√≥dust, majd erre a met√≥dura megh√≠vom a bind met√≥dust √©s √°tadom nekii azt a z objektumot amire szeretn√©m haszn√°lni, v√©g√ºl mindezt elmentem egy v√°ltoz√≥ba(bookEW). Ezut√°n m√°r ezt a bookEW-t tudom haszn√°lni mint met√≥dus √©s ennek megadni az argumentumokat

//ez az√©rt is j√≥, mert ezt at elj√°r√°st t√∂bb objektumra is megh√≠vhatom, pl.: lufthansa, swiss
const bookEW = book.bind(eurowings);
const bookLH = book.bind(lufthansa);
const bookLX = book.bind(swiss);

bookEW(23, 'Steven Williams');
bookLH(512, 'John Doe');

const Mickey = [123, 'Mickey Mouse'];
//bind-n√°l is m≈±k√∂dik, hogy a spread oper√°torral egy t√∂mb√∂t adunk √°t ami tartalmazza az argumentumokat
bookLX(...Mickey);

//ez esetben el≈ëdefini√°ltuk, hogy a bookEW23 met√≥dus csak a 23-as sz√°m√∫ j√°ratra foglal helyet a eurowingnek. A nevet k√©s≈ëbb adom meg mint k√ºl√∂n√°ll√≥ argumentum
const bookEW23 = book.bind(eurowings, 23);
bookEW23('Jonas Schmedtmann');
bookEW23('Martha Cooper');

// With Event Listeners

//egy √∫j property-t √©s √©rt√©ket adunk hozz√° a lufthansa objektumhoz
lufthansa.planes = 300;

//egy √∫j met√≥dust adunk hozz√° a lufthansa obejktumhoz
lufthansa.buyPlane = function () {
  console.log(this);

  this.planes++;
  console.log(this.planes);
};

document
  .querySelector('.buy')
  .addEventListener('click', lufthansa.buyPlane.bind(lufthansa));

// Partial application
const addTax = (rate, value) => value + value * rate;
console.log(addTax(0.1, 200));

//itt a bind met√≥dust haszn√°ljuk, hogy az addTax met√≥dus egyik param√©ter√©nek (rate) default √©rt√©ket adjunk
//ez a f√ºggv√©ny specifikusabb mint az addTax f√ºggv√©ny

//val√≥j√°ban egy eredeti f√ºggv√©nyt (addTAX) bind-olunk, √©s kapunk egy √∫jabb f√ºggv√©nyt(addVAT). Bind-ol√°skor default√©rt√©ket is adhatunk, melyeket m√°r az √∫j f√ºggv√©ny haszn√°l
const addVAT = addTax.bind(null, 0.23);
// addVAT = value => value + value * 0.23;

//itt m√°r csak a value-t adjunk meg
console.log(addVAT(100)); //100 * 23 + 100;
console.log(addVAT(23));

// bind-ol√°s helyett √≠gy is megoldhat√≥ a k√©t f√ºggv√©ny haszn√°lata egyszerre : f√ºggv√©ny ami f√ºggv√©nnyel t√©r vissza
//az eredeti addTAX f√ºggv√©ny megkapja csak a rate param√©ter majd ez a f√ºggv√©ny visszat√©r egy m√°sik f√ºggv√©nnyel (addVAT) amihez a value √©rt√©ket adjuk √°t, √©s a bels≈ë f√ºggv√©ny hajtja v√©gre a sz√°mol√°st, ez tartalmazza a f√ºggv√©ny t√∂rzs√©t
const addTaxRate = function (rate) {
  return function (value) {
    return value + value * rate;
  };
};
const addVAT2 = addTaxRate(0.23);
console.log(addVAT2(100));
console.log(addVAT2(23));

//egyszer≈±s√≠tett v√°ltozat, ha √©rt√©keket akarunk √°tadni olyan f√ºggv√©nynek ami f√ºggv√©nnyel t√©r vissza
console.log(addTaxRate(0.2)(200));

console.log('-------------Coding Challenge #1----------------');
/* 
Let's build a simple poll app!

A poll has a question, an array of options from which people can choose, and an array with the number of replies for each option. This data is stored in the starter object below.

Here are your tasks:

1. Create a method called 'registerNewAnswer' on the 'poll' object. The method does 2 things:
  1.1. Display a prompt window for the user to input the number of the selected option. The prompt should look like this:
        What is your favourite programming language?
        0: JavaScript
        1: Python
        2: Rust
        3: C++
        (Write option number)
  
  1.2. Based on the input number, update the answers array. For example, if the option is 3, increase the value AT POSITION 3 of the array by 1. Make sure to check if the input is a number and if the number makes sense (e.g answer 52 wouldn't make sense, right?)
2. Call this method whenever the user clicks the "Answer poll" button.
3. Create a method 'displayResults' which displays the poll results. The method takes a string as an input (called 'type'), which can be either 'string' or 'array'. If type is 'array', simply display the results array as it is, using console.log(). This should be the default option. If type is 'string', display a string like "Poll results are 13, 2, 4, 1". 
4. Run the 'displayResults' method at the end of each 'registerNewAnswer' method call.

HINT: Use many of the tools you learned about in this and the last section üòâ

BONUS: Use the 'displayResults' method to display the 2 arrays in the test data. Use both the 'array' and the 'string' option. Do NOT put the arrays in the poll object! So what shoud the this keyword look like in this situation?

BONUS TEST DATA 1: [5, 2, 3]
BONUS TEST DATA 2: [1, 5, 3, 9, 6, 1]
*/

const poll = {
  question: 'What is your favourite programming language?',
  options: ['0: JavaScript', '1: Python', '2: Rust', '3: C++'],
  answers: [0, 0, 0, 0],

  registerNewAnswer() {
    //1.1
    const answer = Number(
      prompt(
        `${this.question}\n${this.options.join('\n')}\n(Write option number)`
      )
    );

    //1.2
    typeof answer === 'number' &&
      answer < this.answers.length &&
      this.answers[answer]++;

    this.displayResults();
    this.displayResults('string');
  },

  //3.
  displayResults(type = 'array') {
    if (type === 'array') {
      console.log(this.answers);
    } else if (type === 'string') {
      // Poll results are 13, 2, 4, 1
      console.log(`Poll results are ${this.answers.join(', ')}`);
    }
  },
};

//2.
document
  .querySelector('.poll')

  //bind(poll) n√©lk√ºl a this a gombra mutat, ez√©rt kell a .bind(poll) mert ezzel mondjuk meg neki, hogy nek√ºnk a poll objektumra kell, hogy mutasson
  .addEventListener('click', poll.registerNewAnswer.bind(poll));

console.log(poll);

poll.displayResults.call({ answers: [5, 2, 3] }, 'string');
poll.displayResults.call({ answers: [1, 5, 3, 9, 6, 1] }, 'string');
poll.displayResults.call({ answers: [1, 5, 3, 9, 6, 1] });

console.log('-------------Coding Challenge #1 V√âGE----------------');

console.log('------Immediately Invoked Function Expressions (IIFE)--------');

const runOnce = function () {
  console.log('This will never run again');
};
//a k√≥d egy adott pontj√°n mindig meg kell h√≠vni a f√ºggv√©nyt ha alkalmazni szeretn√©nk
runOnce();

// IIFE - a n√©v n√©lk√ºli f√ºggv√©nydeklar√°ci√≥t k√∂vet≈ëen azonnal megh√≠v√≥dik ,csak egyszer kell megh√≠vni a f√ºggv√©nydeklar√°ci√≥ ut√°n r√∂gt√∂n ();
//a teljes f√ºggv√©nyt ()-be kell tenni, majd azonnal megh√≠vni ();
(function () {
  console.log('This will never run again');
  const isPrivate = 23;
})();

//ugyanez a f√ºggv√©ny ny√≠lf√ºggv√©nyk√©nt
(() => console.log('This arrowfunction will also never run again'))();

{
  const isPrivate = 23;
  var notPrivate = 46;
}
// console.log(isPrivate);//hib√°t dob mert a const √©s a let blokkszint≈± v√°ltoz√≥, k√≠v√ºlr≈ël nem l√°tszik

//vat f√ºggv√©nyszint≈± innen is l√°that√≥
console.log(notPrivate);

console.log('-----------Closures------------');

const secureBooking = function () {
  //a c√©l az, hogy ezt a v√°ltoz√≥t ne lehessen megv√°ltoztatni k√≠v√ºlr≈ël, priv√°tt√° kell tenni
  //ez√©rt egy olyan f√ºggv√©ny kell ami egy f√ºggv√©nnyel t√©r vissza, √©s a v√©dett v√°ltoz√≥kat a sz√ºl≈ë f√ºggv√©nybe(amit megh√≠vunk pl. itt a sz√ºl≈ëf√ºggv√©ny a secureBooking) kell tenni
  let passengerCount = 0;

  return function () {
    passengerCount++;
    console.log(`${passengerCount} passengers`);
  };
};

//els≈ënek megh√≠vom a sz√ºl≈ëf√ºggv√©nyt amit elmentek egy v√°ltoz√≥ba (booker), ez a sz√ºl≈ëf√ºggv√©ny egy f√ºggv√©nnyel t√©r vissza amit a vltoz√≥ba ment√ºnk
//majd ezzel a v√°ltoz√≥val (booker) h√≠vjuk meg a visszaadott (bels≈ë) f√ºggv√©nyt.
const booker = secureBooking();
booker();
booker();
booker();

//console.dir(booker);

// More Closure Examples
// Example 1

let f;

const g = function () {
  const a = 23;
  //glob√°lisan deklar√°lt f v√°ltoz√≥hoz egy f√ºggv√©nyt rendel√ºnk
  f = function () {
    console.log(a * 2);
  };
};

//a h f√ºggv√©nyben is f√ºggv√©nyv√°ltoz√≥ az f
const h = function () {
  const b = 777;
  f = function () {
    console.log(b * 2);
  };
};

g();
f();
//console.dir(f);

// Re-assigning f function
h();
f();
//console.dir(f);

// Example 2
const boardPassengers = function (n, wait) {
  //a f√ºgv√©ny h√≠v√°sakor ez a v√°ltoz√≥ l√©trej√∂n az √©rt√©kkel egy√ºtt
  const perGroup = n / 3;

  //ez a f√ºggv√©ny a megadott √©rt√©knek megfelel≈ë id≈ë ut√°n hajt√≥dikv√©gre
  setTimeout(function () {
    console.log(`We are now boarding all ${n} passengers`);
    console.log(`There are 3 groups, each with ${perGroup} passengers`);
  }, wait * 1000);

  //ez a r√©sz nem v√°rja meg a settimeout v√©g√©t, hanem lefut, teh√°t ez a r√©sz ez√©rt el≈ëzi meg a settimeoutban foglaltakat
  console.log(`Will start boarding in ${wait} seconds`);
};

//ez nem lesz hat√°sra a f√ºggv√©nyben l√©v≈ë perGroup v√°ltoz√≥ra, mert a closure miatt v√©dve van a v√°ltoz√≥ a f√ºggv√©nyben
const perGroup = 1000;
boardPassengers(180, 3);

console.log('------Coding Challenge #2---------');
/* 
This is more of a thinking challenge than a coding challenge 

Take the IIFE below and at the end of the function, attach an event listener that changes the color of the selected h1 element ('header') to blue, each time the BODY element is clicked. Do NOT select the h1 element again!

And now explain to YOURSELF (or someone around you) WHY this worked! Take all the time you need. Think about WHEN exactly the callback function is executed, and what that means for the variables involved in this example.
*/
(function () {
  const header = document.querySelector('h1');
  header.style.color = 'red';

  document.querySelector('body').addEventListener('click', function () {
    header.style.color = 'blue';
  });
})();

console.log('------Coding Challenge #2 V√âGE---------');
